{"version":3,"sources":["components/WelcomeComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["WelcomeComponent","Anime","targets","scale","translateXY","opacity","duration","className","id","style","textAlign","src","width","height","alt","href","target","rel","Component","MainComponent","color","num","type","bg","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAkCeA,EA/Bf,kLAEQC,YAAM,CAACC,QAAS,eAAgBC,MAAO,EAAGC,YAAa,IAAKC,QAAS,EAAGC,SAAU,QAF1F,+BAMQ,OACI,yBAAKC,UAAU,oBAAoBC,GAAG,cAAcC,MAAO,CAAEJ,QAAS,IAClE,yBAAKE,UAAU,8BACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,kBAAkBE,MAAO,CAAEC,UAAW,WACjD,yBAAKC,IAAI,+BAA+BC,MAAM,MAAMC,OAAO,MAAMC,IAAI,UAEzE,yBAAKP,UAAU,mBACX,uBAAGQ,KAAK,0DAA0DC,OAAS,SAASC,IAAI,uBAAsB,0BAAMV,UAAU,0BAC9H,uBAAGQ,KAAK,iCAAiCC,OAAS,SAASC,IAAI,uBAAsB,0BAAMV,UAAU,wBACrG,uBAAGQ,KAAK,sCAAsCC,OAAS,SAASC,IAAI,uBAAsB,0BAAMV,UAAU,wBAC1G,uBAAGQ,KAAK,+BAA+BC,OAAS,SAASC,IAAI,uBAAsB,0BAAMV,UAAU,wBAEvG,yBAAKA,UAAU,mBACX,uBAAGE,MAAO,CAAC,SAAY,UAAvB,8BArBhC,GAAsCS,aCWvBC,EAXf,uKAEQ,OACI,yBAAKZ,UAAU,0DACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAaa,MAAM,UAAUC,IAAK,IAAKC,KAAK,SAASC,IAAI,SALzE,GAAmCL,aCWpBM,G,MAVf,uKAEI,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,WAJR,GAAyBW,cCQLO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50cbfd8f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Anime from 'animejs'\r\n\r\nexport class WelcomeComponent extends Component {\r\n    componentDidMount() {\r\n        Anime({targets: \"#welcomeComp\", scale: 1, translateXY: 500, opacity: 1, duration: 5000})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container hexagon\" id=\"welcomeComp\" style={{ opacity: 0 }}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-8 col-sm-6 welcome\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <div className=\"col-12 col-sm-8\" style={{ textAlign: \"center\"}}>\r\n                                <img src=\"assets/images/HeaderLogo.png\" width=\"300\" height=\"190\" alt=\"logo\" />\r\n                            </div>\r\n                            <div className=\"col-12 col-sm-8\">\r\n                                <a href=\"https://www.linkedin.com/in/salih-%C3%B6zyurt-ba6a2395/\" target = \"_blank\" rel=\"noopener noreferrer\"><span className=\"fa fa-linkedin fa-lg\"></span></a>\r\n                                <a href=\"https://github.com/salihozyurt\" target = \"_blank\" rel=\"noopener noreferrer\"><span className=\"fa fa-github fa-lg\"></span></a>\r\n                                <a href=\"mailto:salihozyurt@salihozyurt.tech\" target = \"_blank\" rel=\"noopener noreferrer\"><span className=\"fa fa-google fa-lg\"></span></a>\r\n                                <a href=\"mailto:salihozyurt@yahoo.com\" target = \"_blank\" rel=\"noopener noreferrer\"><span className=\"fa fa-yahoo fa-lg\"></span></a>\r\n                            </div>\r\n                            <div className=\"col-12 col-sm-8\">\r\n                                <p style={{\"fontSize\": \"large\"}}>Backend Developer</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomeComponent\r\n","import React, { Component } from 'react'\r\nimport ParticlesBg from \"particles-bg\"\r\nimport WelcomeComponent from './WelcomeComponent'\r\nexport class MainComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"d-flex h-100 align-items-center justify-content-center\">\r\n                <WelcomeComponent />\r\n                <ParticlesBg color=\"#116979\" num={200} type=\"cobweb\" bg={true} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainComponent\r\n","import React, { Component } from 'react'\nimport MainComponent from './components/MainComponent'\nimport './App.css'\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainComponent />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport 'bootstrap-social/bootstrap-social.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}