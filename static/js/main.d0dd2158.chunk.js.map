{"version":3,"sources":["components/HeaderLogo.png","components/MainBody.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainBody","className","src","logo","href","target","color","size","Component","App","props","f","bind","canvas","React","createRef","this","c","current","ctx","getContext","height","window","innerHeight","width","innerWidth","matrix","split","columns","drops","x","setInterval","fillStyle","fillRect","font","font_size","i","length","text","Math","floor","random","fillText","ref","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,wC,gQCyB5BC,G,MAnBf,uKAEQ,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAMC,MACX,yBAAKF,UAAU,UACX,uBAAGG,KAAK,0CAA0CC,OAAS,UAAS,kBAAC,IAAD,CAAmBJ,UAAU,UAAUK,MAAM,UAAUC,KAAK,SAChI,uBAAGH,KAAK,0DAA0DC,OAAS,UAAS,kBAAC,IAAD,CAAkBJ,UAAU,UAAUK,MAAM,UAAUC,KAAK,SAC/I,uBAAGH,KAAK,iCAAiCC,OAAS,UAAS,kBAAC,IAAD,CAAgBJ,UAAU,UAAUK,MAAM,UAAUC,KAAK,SACpH,uBAAGH,KAAK,+BAA+BC,OAAS,UAAS,kBAAC,IAAD,CAAcJ,UAAU,UAAUK,MAAM,UAAUC,KAAK,UAEpH,yBAAKN,UAAU,SACX,gaAZpB,GAA8BO,cCuEfC,G,MAzEf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,EAAI,EAAKA,EAAEC,KAAP,gBACT,EAAKC,OAASC,IAAMC,YAHH,EADrB,gEAQIC,KAAKL,MART,0BAYI,IAAIM,EAAID,KAAKH,OAAOK,QAChBC,EAAMF,EAAEG,WAAW,MAGvBH,EAAEI,OAASC,OAAOC,YAClBN,EAAEO,MAAQF,OAAOG,WAGjB,IAAIC,EAAS,uFAEbA,EAASA,EAAOC,MAAM,IAQtB,IANA,IACIC,EAAUX,EAAEO,MADA,GAGZK,EAAQ,GAGJC,EAAI,EAAGA,EAAIF,EAASE,IACxBD,EAAMC,GAAK,EA8BfC,aA3BA,WAIIZ,EAAIa,UAAY,sBAChBb,EAAIc,SAAS,EAAG,EAAGhB,EAAEO,MAAOP,EAAEI,QAE9BF,EAAIa,UAAY,UAChBb,EAAIe,KAAOC,aAEX,IAAI,IAAIC,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IACjC,CAEI,IAAIE,EAAOZ,EAAOa,KAAKC,MAAMD,KAAKE,SAASf,EAAOW,SAElDlB,EAAIuB,SAASJ,EAzBL,GAyBWF,EAzBX,GAyBwBP,EAAMO,IAzB9B,GA6BLP,EAAMO,GAAenB,EAAEI,QAAUkB,KAAKE,SAAW,OAChDZ,EAAMO,GAAK,GAGfP,EAAMO,QAII,MA7DtB,+BAgEI,OACE,yBAAKnC,UAAU,OACb,4BAAQ0C,IAAK3B,KAAKH,OAAQ+B,GAAG,MAC7B,kBAAC,EAAD,WAnER,GAAyBpC,cCQLqC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0dd2158.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HeaderLogo.3f4cec54.png\";","import React, { Component } from 'react'\r\nimport logo from './HeaderLogo.png'\r\nimport * as Feather from 'react-feather'\r\n\r\nimport './MainBody.css'\r\n\r\nexport class MainBody extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Main\">\r\n                <img src={ logo } />\r\n                <div className=\"Navbar\">\r\n                    <a href=\"https://www.instagram.com/salihozyurt1/\" target = \"_blank\"><Feather.Instagram className=\"iconSet\" color=\"#e43f5a\" size=\"7vh\" /></a>\r\n                    <a href=\"https://www.linkedin.com/in/salih-%C3%B6zyurt-ba6a2395/\" target = \"_blank\"><Feather.Linkedin className=\"iconSet\" color=\"#e43f5a\" size=\"7vh\" /></a> \r\n                    <a href=\"https://github.com/salihozyurt\" target = \"_blank\"><Feather.GitHub className=\"iconSet\" color=\"#e43f5a\" size=\"7vh\" /></a> \r\n                    <a href=\"mailto:salih.zyurt@gmail.com\" target = \"_blank\"><Feather.Mail className=\"iconSet\" color=\"#e43f5a\" size=\"7vh\" /></a> \r\n                </div>\r\n                <div className=\"About\">\r\n                    <p>Speaking english ? i live in english. it's not only language to me it's totally best way of expressing my own. you know, sometimes i'm dreaming of a world all people understand each other perfectly. yes i've a dream. imagine all the people dancing and touching each other, communicate in a joyful harmony. oğlum çay söyle bakma öyle sığır gibi! tea ?</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainBody\r\n","import React, { Component } from 'react'\nimport MainBody from './components/MainBody'\n\nimport './App.css'\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n    this.f = this.f.bind(this)\n    this.canvas = React.createRef()\n  }\n\n  componentDidMount() {\n    this.f()\n  }\n\n  f() {\n    var c = this.canvas.current;\n    var ctx = c.getContext(\"2d\");\n\n    //making the canvas full screen\n    c.height = window.innerHeight;\n    c.width = window.innerWidth;\n\n    //chinese characters - taken from the unicode charset\n    var matrix = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%+-/~{[|`]}\";\n    //converting the string into an array of single characters\n    matrix = matrix.split(\"\");\n\n    var font_size = 10;\n    var columns = c.width/font_size; //number of columns for the rain\n    //an array of drops - one per column\n    var drops = [];\n    //x below is the x coordinate\n    //1 = y co-ordinate of the drop(same for every drop initially)\n    for(var x = 0; x < columns; x++)\n        drops[x] = 1; \n\n    //drawing the characters\n    function draw()\n    {\n        //Black BG for the canvas\n        //translucent BG to show trail\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.04)\";\n        ctx.fillRect(0, 0, c.width, c.height);\n\n        ctx.fillStyle = \"#f4427d\";//green text\n        ctx.font = font_size + \"px arial\";\n        //looping over drops\n        for(var i = 0; i < drops.length; i++)\n        {\n            //a random chinese character to print\n            var text = matrix[Math.floor(Math.random()*matrix.length)];\n            //x = i*font_size, y = value of drops[i]*font_size\n            ctx.fillText(text, i*font_size, drops[i]*font_size);\n\n            //sending the drop back to the top randomly after it has crossed the screen\n            //adding a randomness to the reset to make the drops scattered on the Y axis\n            if(drops[i]*font_size > c.height && Math.random() > 0.975)\n                drops[i] = 0;\n\n            //incrementing Y coordinate\n            drops[i]++;\n        }\n    }\n\n    setInterval(draw, 35);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas ref={this.canvas} id=\"c\"></canvas>\n        <MainBody />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}